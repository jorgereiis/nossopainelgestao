"""
Django settings for setup project.

Generated by 'django-admin startproject' using Django 4.2.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path
import os
from dotenv import load_dotenv
import logging
from logging.handlers import RotatingFileHandler
from django.core.exceptions import ImproperlyConfigured



load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# ==================== CONFIGURAÇÃO DE DIRETÓRIOS ====================
# Garante que o diretório de logs existe (necessário para instalações novas)
BASE_LOG_DIR = BASE_DIR / "logs"
BASE_LOG_DIR.mkdir(exist_ok=True)

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv("SECRET_KEY")
if not SECRET_KEY:
    raise ImproperlyConfigured("SECRET_KEY environment variable is not set.")

# reCaptcha Configs

RECAPTCHA_PUBLIC_KEY = os.getenv("RECAPTCHA_PUBLIC_KEY")
RECAPTCHA_PRIVATE_KEY = os.getenv("RECAPTCHA_PRIVATE_KEY")
SILENCED_SYSTEM_CHECKS = ['captcha.recaptcha_test_key_error']
RECAPTCHA_REQUIRED_SCORE = 0.85

# SECURITY WARNING: don't run with debug turned on in production!
# SEGURANÇA: Default é False. Para desenvolvimento, configure DEBUG=True no .env
DEBUG = os.getenv('DEBUG', 'False').lower() in ('true', '1', 'yes')

if DEBUG:
    ALLOWED_HOSTS = ['*']
else:
    ALLOWED_HOSTS = [
        'nossopainel.com.br',
        'www.nossopainel.com.br',
    ]

# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    'whitenoise.runserver_nostatic', # whitenoise para servir arquivos estáticos
    "django.contrib.staticfiles",
    "axes",  # django-axes para rate limiting e bloqueio de tentativas de login
    "cadastros.apps.CadastrosConfig",
    "crispy_forms",
    "crispy_bootstrap5",
    "django_recaptcha",
]

CRISPY_TEMPLATE_PACK = "bootstrap5"

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "axes.middleware.AxesMiddleware",  # django-axes deve vir após AuthenticationMiddleware
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    'setup.middleware.InternalAPIMiddleware',  # Restringe endpoints internos por IP
    'setup.middleware.CheckUserLoggedInMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware', # whitenoise para servir arquivos estáticos
]

SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')
CSRF_COOKIE_SECURE = True
SESSION_COOKIE_SECURE = True
SESSION_COOKIE_HTTPONLY = True
CSRF_COOKIE_HTTPONLY = True
SESSION_COOKIE_SAMESITE = "Lax"
CSRF_COOKIE_SAMESITE = "Lax"
SECURE_CONTENT_TYPE_NOSNIFF = True
SECURE_REFERRER_POLICY = "same-origin"
X_FRAME_OPTIONS = "SAMEORIGIN"
SECURE_SSL_REDIRECT = os.getenv("SECURE_SSL_REDIRECT", "0").lower() in ("1", "true", "yes")
SECURE_HSTS_SECONDS = int(os.getenv("SECURE_HSTS_SECONDS", "0"))
SECURE_HSTS_INCLUDE_SUBDOMAINS = bool(SECURE_HSTS_SECONDS)
SECURE_HSTS_PRELOAD = False

CSRF_TRUSTED_ORIGINS = [
    'https://nossopainel.com.br',
    'http://nossopainel.com.br',
    'https://www.nossopainel.com.br',
    'http://www.nossopainel.com.br',
]

ROOT_URLCONF = "setup.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [os.path.join(BASE_DIR, "templates")],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

TEMPLATES[0]["OPTIONS"]["context_processors"] += [
    "setup.context_processors.notifications",
    "setup.context_processors.user_profile",
]

WSGI_APPLICATION = "setup.wsgi.application"


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

# Configuração flexível: SQLite (dev/fallback) ou MySQL (produção)
DB_ENGINE = os.getenv("DB_ENGINE", "sqlite").lower()

if DB_ENGINE == "mysql":
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.mysql',
            'NAME': os.getenv("DB_NAME", "nossopaineldb"),
            'USER': os.getenv("DB_USER", "nossopaineluser"),
            'PASSWORD': os.getenv("DB_PASSWORD"),
            'HOST': os.getenv("DB_HOST", "localhost"),
            'PORT': os.getenv("DB_PORT", "3306"),
            'OPTIONS': {
                'init_command': "SET sql_mode='STRICT_TRANS_TABLES'",
                'charset': 'utf8mb4',
            },
            'CONN_MAX_AGE': 600,  # Connection pooling (10 minutos)
        }
    }
else:
    # Fallback para SQLite (desenvolvimento/testes)
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.sqlite3",
            "NAME": BASE_DIR / "db.sqlite3",
            'OPTIONS': {
                'timeout': 30,
            },
        }
    }

# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = "pt-br"

TIME_ZONE = "America/Recife"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = "/static/"

STATICFILES_DIRS = [os.path.join(BASE_DIR, "setup/static")]

STATIC_ROOT = os.path.join(BASE_DIR, "staticfiles")

# Media files (uploads)
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# Authentication Configs

LOGIN_REDIRECT_URL = "dashboard"
LOGOUT_REDIRECT_URL = "login"
LOGIN_URL = "login"

# Session Configs

SESSION_COOKIE_AGE = 7200  # tempo em segundos
SESSION_SAVE_EVERY_REQUEST = True

# ==================== CONFIGURAÇÃO DE LOGGING ====================
# Sistema de logging do Django com rotação automática de arquivos
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'file': {
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': str(BASE_LOG_DIR / 'error.log'),
            'maxBytes': 10 * 1024 * 1024,  # 10MB por arquivo
            'backupCount': 5,  # Mantém 5 arquivos de backup (total: 50MB)
            'formatter': 'verbose',
            'encoding': 'utf-8',
        },
        'security_file': {
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': str(BASE_LOG_DIR / 'security.log'),
            'maxBytes': 10 * 1024 * 1024,  # 10MB por arquivo
            'backupCount': 5,  # Mantém 5 arquivos de backup (total: 50MB)
            'formatter': 'verbose',
            'encoding': 'utf-8',
        },
    },
    'formatters': {
        'verbose': {
            'format': '[%(asctime)s] [%(levelname)s] %(module)s - %(message)s',
            'datefmt': '%Y-%m-%d %H:%M:%S',
        },
    },
    'loggers': {
        'django': {
            'handlers': ['file'],
            'level': 'ERROR',
            'propagate': True,
        },
        'django.request': {
            'handlers': ['file'],
            'level': 'INFO',
            'propagate': False,
        },
        'axes': {
            'handlers': ['security_file'],
            'level': 'INFO',
            'propagate': False,
        },
        'security': {
            'handlers': ['security_file'],
            'level': 'INFO',
            'propagate': False,
        },
    },
    'root': {
        'handlers': ['file'],
        'level': 'WARNING',
    },
}

# Authentication Backends
# O AxesBackend deve vir ANTES do ModelBackend
AUTHENTICATION_BACKENDS = [
    'axes.backends.AxesBackend',  # django-axes backend
    'django.contrib.auth.backends.ModelBackend',  # Django default backend
]

# ========================================
# Django-Axes Configuration
# Rate Limiting e Bloqueio de Tentativas de Login
# ========================================

# Número de tentativas de login falhadas antes de bloquear
AXES_FAILURE_LIMIT = 5

# Tempo de bloqueio em horas (1 hora = timedelta(hours=1))
# Usando horas diretas pois o django-axes aceita inteiro como horas
from datetime import timedelta
AXES_COOLOFF_TIME = timedelta(hours=1)

# Bloquear por combinação de IP + Username (mais seguro)
# Parâmetros aceitos:
# - username: bloqueia apenas por username
# - ip_address: bloqueia apenas por IP
# - user_agent: bloqueia por user agent
# Combinação: ["ip_address", "username"] bloqueia quando IP E username coincidem
AXES_LOCKOUT_PARAMETERS = ["ip_address", "username"]  # Bloqueia por combinação de IP + username

# Resetar contador de falhas após login bem-sucedido
AXES_RESET_ON_SUCCESS = True

# Usar username como identificador de usuário
AXES_USERNAME_FORM_FIELD = "username"

# Bloquear apenas no login (não em outras views)
AXES_ONLY_ADMIN_SITE = False

# Verbose: logs mais detalhados
AXES_VERBOSE = True

# Habilitar admin para visualizar tentativas de acesso
AXES_ENABLE_ADMIN = True

# Lockout template (template customizado para conta bloqueada)
AXES_LOCKOUT_TEMPLATE = 'account_locked.html'

# Usar cache para melhor performance (opcional, mas recomendado)
# Se não tiver cache configurado, axes usa o banco de dados
# AXES_CACHE = 'default'

# Lockout response: pode ser 403 ou redirect para template customizado
# Por padrão retorna 403 Forbidden
# AXES_LOCKOUT_URL = '/conta-bloqueada/'

# IP meta precedence (ordem de verificação de IP)
# Útil se estiver atrás de proxy/load balancer
AXES_IPWARE_PROXY_COUNT = 1
AXES_IPWARE_META_PRECEDENCE_ORDER = [
    'HTTP_X_FORWARDED_FOR',
    'HTTP_X_REAL_IP',
    'REMOTE_ADDR',
]
