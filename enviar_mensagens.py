import calendar
from django.shortcuts import get_object_or_404
from pathlib import os
import django

# Definir a vari√°vel de ambiente DJANGO_SETTINGS_MODULE
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'setup.settings')

# Carregar URLs da API
url_api = os.getenv("URL_API")

# Carregar as configura√ß√µes do Django
django.setup()

from cadastros.models import Mensalidade, SessaoWpp, MensagemEnviadaWpp, Cliente, DadosBancarios
from datetime import datetime, timedelta
from django.contrib.auth.models import User
from django.utils import timezone
from gc import get_objects
import subprocess
import functools
import threading
import requests
import schedule
import random
import codecs
import base64
import time
import json
import sys
import os
import re


##### Fun√ß√£o para enviar mensagens e registrar em arquivo de log
def enviar_mensagem(telefone, mensagem, usuario, token, cliente):
    url = '{}/{}/send-message'.format(url_api, usuario)
    headers = {
        'Content-Type': 'application/json',
        'Accept': 'application/json',
        'Authorization': 'Bearer ' + token
    }
    body = {
        'phone': telefone,
        'message': mensagem,
        'isGroup': False
    }

    max_tentativas = 3  # Definir o n√∫mero m√°ximo de tentativas
    tentativa = 1

    # Nome do arquivo de log baseado no nome do usu√°rio
    log_directory = './logs/Envios agendados/'
    log_filename = os.path.join(log_directory, '{}.log'.format(usuario))
    data_hora_atual = datetime.now().strftime("%d-%m-%Y %H:%M:%S")

    while tentativa <= max_tentativas:
        if tentativa == 2:
            tel = telefone
            if tel.startswith('55'):
                tel = tel[2:]

                body = {
                    'phone': tel,
                    'message': mensagem,
                    'isGroup': False
                }
        response = requests.post(url, headers=headers, json=body)

        # Verificar se o diret√≥rio de logs existe e criar se necess√°rio
        if not os.path.exists(log_directory):
            os.makedirs(log_directory)
        # Verificar se o arquivo de log existe e criar se necess√°rio
        if not os.path.isfile(log_filename):
            open(log_filename, 'w').close()
        # Verificar o status da resposta e tomar a√ß√µes apropriadas, se necess√°rio
        if response.status_code == 200 or response.status_code == 201:
            with open(log_filename, 'a') as log_file:
                log_file.write('[{}] [TIPO][Agendado] [USU√ÅRIO][{}] [CLIENTE][{}] Mensagem enviada!\n'.format(datetime.now().strftime("%d-%m-%Y %H:%M:%S"), usuario, cliente))
            break  # Sai do loop se a resposta for de sucesso
        elif response.status_code == 400:
            response_data = json.loads(response.text)
            error_message = response_data.get('message')
            with open(log_filename, 'a') as log_file:
                log_file.write('[{}] [TIPO][Agendado] [USU√ÅRIO][{}] [CLIENTE][{}] [CODE][{}] [TENTATIVA {}] - {}\n'.format(datetime.now().strftime("%d-%m-%Y %H:%M:%S"), usuario, cliente, response.status_code, tentativa, error_message))
        else:
            print(f"[ERRO ENVIO DE MSGS] [{response.status_code}] \n [{response.text}]")
            response_data = json.loads(response.text)
            error_message = response_data.get('message')
            with open(log_filename, 'a') as log_file:
                log_file.write('[{}] [TIPO][Agendado] [USU√ÅRIO][{}] [CLIENTE][{}] [CODE][{}] [TENTATIVA {}] - {}\n'.format(datetime.now().strftime("%d-%m-%Y %H:%M:%S"), usuario, cliente, response.status_code, tentativa, error_message))

        # Incrementa o n√∫mero de tentativas
        tentativa += 1

        # Tempo de espera aleat√≥rio entre cada tentativa com limite m√°ximo de 30 segundos
        tempo_espera = random.uniform(20, 30)
        time.sleep(tempo_espera)
#####


##### Fun√ß√£o para filtrar as mensalidades dos clientes a vencer
def mensalidades_a_vencer():
    # Obter a data atual
    data_atual = datetime.now().date()
    # Obter data e hora formatada
    data_hora_atual = datetime.now().strftime("%d-%m-%Y %H:%M:%S")

    # Calcula a data daqui a 2 dias
    data_daqui_a_2_dias = data_atual + timedelta(days=2)

    # Filtra os dados de pagamento do usu√°rio
    

    # Filtrar as mensalidades
    mensalidades = Mensalidade.objects.filter(
        dt_vencimento=data_daqui_a_2_dias,
        cliente__nao_enviar_msgs=False,
        pgto=False,
        cancelado=False
    )
    quantidade_mensalidades = mensalidades.count()
    print('[{}] [A VENCER] QUANTIDADE DE ENVIOS A SEREM FEITOS: {}'.format(data_hora_atual, quantidade_mensalidades))

    # Iterar sobre as mensalidades e enviar mensagens
    for mensalidade in mensalidades:
        usuario = mensalidade.usuario
        cliente = mensalidade.cliente
        valor = mensalidade.valor
        nome_cliente = str(cliente)
        primeiro_nome = nome_cliente.split(' ')[0].upper()
        dt_vencimento = mensalidade.dt_vencimento.strftime("%d/%m")
        telefone = str(cliente.telefone)
        telefone_formatado = '55' + re.sub(r'\D', '', telefone)

        try:
            token_user = SessaoWpp.objects.get(usuario=usuario)
            dados_pagamento = DadosBancarios.objects.get(usuario=usuario)
        except SessaoWpp.DoesNotExist or DadosBancarios.DoesNotExist:
            continue  # Pula para a pr√≥xima itera√ß√£o caso o objeto n√£o seja encontrado

        mensagem = """‚ö†Ô∏è *ATEN√á√ÉO, {} !!!* ‚ö†Ô∏è\n\n*SUA MENSALIDADE VENCE EM:*\n\nüí∞ [{}] R$ {}\n\n_Fa√ßa o seu pagamento at√© a data informada e evite a perca do acesso!_\n\n‚ñ´ *PAGAMENTO COM PIX*\n\n{}\n{}\n{}\n{}\n\n‚ÄºÔ∏è _Caso j√° tenha pago, por favor, nos envie o comprovante para confirma√ß√£o e continuidade do acesso._""".format(primeiro_nome, dt_vencimento, valor, dados_pagamento.tipo_chave, dados_pagamento.chave, dados_pagamento.instituicao, dados_pagamento.beneficiario)

        enviar_mensagem(telefone_formatado, mensagem, usuario, token_user.token, nome_cliente)
        
        # Tempo de espera aleat√≥rio entre cada tentativa com limite m√°ximo de 60 segundos
        tempo_espera = random.uniform(30, 60)
        time.sleep(tempo_espera)
#####


##### Fun√ß√£o para filtrar as mensalidades dos clientes em atraso
def mensalidades_vencidas():
    # Obter a data atual
    data_atual = datetime.now().date()
    # Obter o hor√°rio atual
    hora_atual = datetime.now().time()
    # Obter data e hora formatada
    data_hora_atual = datetime.now().strftime("%d-%m-%Y %H:%M:%S")

    # Calcula a data de dois dias atr√°s
    data_dois_dias_atras = data_atual - timedelta(days=2)

    # Filtrar as mensalidades vencidas h√° dois dias
    mensalidades = Mensalidade.objects.filter(
        dt_vencimento=data_dois_dias_atras,
        cliente__nao_enviar_msgs=False,
        pgto=False,
        cancelado=False
    )
    quantidade_mensalidades = mensalidades.count()
    print('[{}] [EM ATRASO] QUANTIDADE DE ENVIOS A SEREM FEITOS: {}'.format(data_hora_atual, quantidade_mensalidades))

    # Iterar sobre as mensalidades e enviar mensagens
    for mensalidade in mensalidades:
        usuario = mensalidade.usuario
        cliente = mensalidade.cliente
        nome_cliente = str(cliente)
        primeiro_nome = nome_cliente.split(' ')[0]
        telefone = str(cliente.telefone)
        telefone_formatado = '55' + re.sub(r'\D', '', telefone)
        saudacao = ''

        # Definir a sauda√ß√£o de acordo com o hor√°rio atual
        if hora_atual < datetime.strptime("12:00:00", "%H:%M:%S").time():
            saudacao = 'Bom dia'
        elif hora_atual < datetime.strptime("18:00:00", "%H:%M:%S").time():
            saudacao = 'Boa tarde'
        else:
            saudacao = 'Boa noite'

        try:
            token_user = SessaoWpp.objects.get(usuario=usuario)
        except SessaoWpp.DoesNotExist:
            continue  # Pula para a pr√≥xima itera√ß√£o caso o objeto n√£o seja encontrado

        mensagem = """*{}, {} üòä*\n\n*Ainda n√£o identificamos o pagamento da sua mensalidade para renova√ß√£o.*\n\nCaso j√° tenha feito, envie aqui novamente o seu comprovante, por favor!""".format(saudacao, primeiro_nome)

        enviar_mensagem(telefone_formatado, mensagem, usuario, token_user.token, nome_cliente)

        # Tempo de espera aleat√≥rio entre cada tentativa com limite m√°ximo de 60 segundos
        tempo_espera = random.uniform(30, 60)
        time.sleep(tempo_espera)
#####


##### BLOCO DE ENVIO DE MENSAGENS PERSONALIZADAS PARA CLIENTES CANCELADOS POR QTD. DE DIAS
# Fun√ß√£o para enviar mensagem
def enviar_mensagem_formatada(mensalidades, mensagem_template, hora_atual):
    for mensalidade in mensalidades:
        usuario = mensalidade.usuario
        cliente = mensalidade.cliente
        nome_cliente = str(cliente)
        primeiro_nome = nome_cliente.split(' ')[0]
        telefone = str(cliente.telefone)
        telefone_formatado = '55' + re.sub(r'\D', '', telefone)

        # Definir a sauda√ß√£o de acordo com o hor√°rio atual
        if hora_atual < datetime.strptime("12:00:00", "%H:%M:%S").time():
            saudacao = 'Bom dia'
        elif hora_atual < datetime.strptime("18:00:00", "%H:%M:%S").time():
            saudacao = 'Boa tarde'
        else:
            saudacao = 'Boa noite'

        try:
            token_user = SessaoWpp.objects.get(usuario=usuario)
        except SessaoWpp.DoesNotExist:
            continue  # Pula para a pr√≥xima itera√ß√£o caso o objeto n√£o seja encontrado

        mensagem = mensagem_template.format(saudacao, primeiro_nome)

        enviar_mensagem(telefone_formatado, mensagem, usuario, token_user.token, nome_cliente)

        # Tempo de espera aleat√≥rio entre cada tentativa com limite m√°ximo de 60 segundos
        tempo_espera = random.uniform(30, 60)
        time.sleep(tempo_espera)
#####


#####
def calcular_data_atraso(qtd_dias):
    return datetime.now().date() - timedelta(days=qtd_dias)
#####


##### Fun√ß√£o principal para filtrar as mensalidades dos clientes cancelados entre 3 e 35 dias
def mensalidades_canceladas():
    atrasos = [
        {"dias": 3, "mensagem": "*{}, {}.* üëçüèº\n\nVimos em nosso sistema que j√° fazem uns dias que o seu acesso foi encerrado e gostar√≠amos de saber se voc√™ deseja continuar utilizando?"},
        {"dias": 15, "mensagem": "*{}, {}* ü´°\n\nTudo bem? Espero que sim.\n\nFaz um tempo que voc√™ deixou de ser nosso cliente ativo, e ficamos preocupados. Houve algo que n√£o agradou em nosso sistema?\n\nPergunto, pois se algo n√£o agradou, nos informe para fornecermos uma plataforma melhor para voc√™, t√° bom?\n\nEstamos √† disposi√ß√£o! üôèüèº"},
        {"dias": 35, "mensagem": "*Opa.. {}!! Tudo bacana?*\n\nComo voc√™ j√° foi nosso cliente, trago uma not√≠cia que talvez voc√™ goste muuuiito!!\n\nVoc√™ pode renovar a sua mensalidade conosco pagando *APENAS R$ 24.90* nos pr√≥ximos 3 meses. Olha s√≥ que bacana?!?!\n\nEsse tipo de desconto n√£o oferecemos a qualquer um, viu? rsrs\n\nCaso tenha interesse, avise aqui, pois iremos garantir essa oferta apenas essa semana. üëèüèºüëèüèº"}
    ]

    for atraso in atrasos:
        qtd_dias = atraso["dias"]
        mensagem_template = atraso["mensagem"]

        data_atraso = calcular_data_atraso(qtd_dias)
        mensalidades = Mensalidade.objects.filter(
            cliente__cancelado=True,
            cliente__nao_enviar_msgs=False,
            dt_cancelamento=data_atraso,
            pgto=False,
            cancelado=True,
            notificacao_wpp1=False
        )

        quantidade = mensalidades.count()
        print(f'[{datetime.now().strftime("%d-%m-%Y %H:%M:%S")}] [CANCELADAS H√Å {qtd_dias} DIAS] QUANTIDADE DE ENVIOS A SEREM FEITOS: {quantidade}')
        
        if quantidade > 0:
            enviar_mensagem_formatada(mensalidades, mensagem_template, datetime.now().time())
            if qtd_dias > 30:
                for mensalidade in mensalidades:
                    try:
                        mensalidade.notificacao_wpp1 = True
                        mensalidade.dt_notif_wpp1 = datetime.now()
                        mensalidade.save()
                        print(f"[ENVIO PROMO REALIZADO] {mensalidade.cliente.nome} - [DT CANCEL] {mensalidade.dt_cancelamento}")
                    except Exception as e:
                        print(f"[ERROR] Erro ao salvar Mensalidade ID {mensalidade.id}: {e}")
        else:
            print(f"Nenhum envio realizado para mensalidades vencidas h√° {qtd_dias} dias")
##### FIM


##### BLOCO PARA ENVIO DE MENSAGENS AOS CLIENTES ATIVOS, CANCELADOS E FUTUROS CLIENTES (AVULSO)
def wpp_msg_ativos(type, image_name, message):
    tipo_envio = str(type)
    BASE_URL = url_api + '/{}/send-{}'
    mensagem = message
    image_base64 = get_img_base64(image_name, tipo_envio)
    usuario = User.objects.get(id=1)
    sessao = get_object_or_404(SessaoWpp, usuario=usuario)
    token = sessao.token
    log_directory = './logs/Envios agendados/'
    log_filename = os.path.join(log_directory, f'{usuario}.log')
    log_send_result_filename = os.path.join(log_directory, f'{usuario}_send_result.log')
    clientes = None

    def send_wpp_msg_actives(url, telefone):
        # Verificar se j√° enviou uma mensagem para este telefone hoje
        if MensagemEnviadaWpp.objects.filter(usuario=usuario, telefone=telefone, data_envio=timezone.now().date()).exists():
            # Verificar se o diret√≥rio de logs existe e criar se necess√°rio
            if not os.path.exists(log_directory):
                os.makedirs(log_directory)
            # Verificar se o arquivo de log existe e criar se necess√°rio
            if not os.path.isfile(log_send_result_filename):
                open(log_send_result_filename, 'w').close()
            # Escrever no arquivo de log
            with codecs.open(log_send_result_filename, 'a', encoding='utf-8') as log_file:
                log_file.write('[{}] {} - ‚ö†Ô∏è J√° foi feito envio hoje!\n'.format(datetime.now().strftime("%d-%m-%Y %H:%M:%S"), telefone))

        else:
            # Prossegue com o envio da mensagem
            if not telefone.startswith('55'):
                telefone = '55' + telefone

            headers = {
                'Content-Type': 'application/json',
                'Accept': 'application/json',
                'Authorization': 'Bearer ' + token
            }
            body = {
                'phone': telefone,
                'isGroup': False,
                'message': mensagem
            }

            if image_name:
                body['filename'] = image_name
                body['caption'] = mensagem
                body['base64'] = 'data:image/png;base64,' + image_base64

            max_attempts = 3
            attempts = 1
            while attempts <= max_attempts:
                if attempts == 2:
                    # Tratando o telefone como padr√£o Brasileiro para remover o d√≠gito '9' e tentar fazer novo envio
                    tel = telefone
                    if tel.startswith('55'):
                        ddi = tel[:2]
                        ddd = tel[2:4]
                        tel = tel[4:]
                        # Remove o d√≠gito '9' se o telefone tiver 9 d√≠gitos
                        if len(tel) == 9 and tel.startswith('9'):
                            tel = tel[1:]
                            body['phone'] = ddi + ddd + tel
                
                if attempts == 3:
                    # Tratando o telefone como padr√£o Internacional, revomendo apenas os d√≠gitos '55'
                    tel = telefone
                    if tel.startswith('55'):
                        tel = tel[2:]
                        body['phone'] = tel

                response = requests.post(url, headers=headers, json=body)

                if response.status_code == 200 or response.status_code == 201:
                    # Verificar se o diret√≥rio de logs existe e criar se necess√°rio
                    if not os.path.exists(log_directory):
                        os.makedirs(log_directory)
                    if not os.path.exists(log_directory):
                        os.makedirs(log_directory)
                    # Verificar se o arquivo de log existe e criar se necess√°rio
                    if not os.path.isfile(log_filename):
                        open(log_filename, 'w').close()
                    if not os.path.isfile(log_send_result_filename):
                        open(log_send_result_filename, 'w').close()
                    # Escrever no arquivo de log
                    with open(log_filename, 'a') as log_file:
                        log_file.write('[{}] [TIPO][{}] [USU√ÅRIO][{}] [TELEFONE][{}] Mensagem enviada!\n'.format(datetime.now().strftime("%d-%m-%Y %H:%M:%S"), tipo_envio.upper(), usuario, telefone))
                    with codecs.open(log_send_result_filename, 'a', encoding='utf-8') as log_file:
                        log_file.write('[{}] {} - ‚úÖ Mensagem enviada\n'.format(datetime.now().strftime("%d-%m-%Y %H:%M:%S"), telefone))
                    # Registrar o envio da mensagem para o dia atual
                    if telefone.startswith('55'):
                        telefone=telefone[2:]
                    MensagemEnviadaWpp.objects.create(usuario=usuario, telefone=telefone)
                    time.sleep(random.uniform(30, 60))
                    break
                else:
                    if attempts <= max_attempts:
                        time.sleep(random.uniform(10, 20))
                    # Verificar se o diret√≥rio de logs existe e criar se necess√°rio
                    if not os.path.exists(log_directory):
                        os.makedirs(log_directory)
                    # Verificar se o arquivo de log existe e criar se necess√°rio
                    if not os.path.isfile(log_filename):
                        open(log_filename, 'w').close()
                    # Escrever no arquivo de log
                    with open(log_filename, 'a') as log_file:
                        response_data={}
                        try:
                            response_data = json.loads(response.text)
                        except json.decoder.JSONDecodeError as e:
                            error_message = response_data.get('message') if response_data.get('message') else str(e)
                            log_file.write('[{}] [TIPO][{}] [USU√ÅRIO][{}] [TELEFONE][{}] [CODE][{}] [TENTATIVA {}] - {}\n'.format(datetime.now().strftime("%d-%m-%Y %H:%M:%S"), tipo_envio.upper(), usuario, telefone, response.status_code, attempts, error_message))

                    attempts += 1

                if attempts == max_attempts:
                    # Verificar se o diret√≥rio de logs existe e criar se necess√°rio
                    if not os.path.exists(log_directory):
                        os.makedirs(log_directory)
                    # Verificar se o arquivo de log existe e criar se necess√°rio
                    if not os.path.isfile(log_send_result_filename):
                        open(log_send_result_filename, 'w').close()
                    # Escrever no arquivo de log
                    with codecs.open(log_send_result_filename, 'a', encoding='utf-8') as log_file:
                        log_file.write('[{}] {} - ‚ùå N√£o enviada (consultar log)\n'.format(datetime.now().strftime("%d-%m-%Y %H:%M:%S"), telefone))

    if tipo_envio == 'ativos':
        clientes = Cliente.objects.filter(usuario=usuario, cancelado=False, nao_enviar_msgs=False)
        telefones = ','.join([re.sub(r'\s+|\W', '', cliente.telefone) for cliente in clientes])

    elif tipo_envio == 'cancelados':
        clientes = Cliente.objects.filter(usuario=usuario, cancelado=True, data_cancelamento__lte=timezone.now()-timedelta(days=40), nao_enviar_msgs=False)
        telefones = ','.join([re.sub(r'\s+|\W', '', cliente.telefone) for cliente in clientes])

    elif tipo_envio == 'avulso':
        telefones = process_telefones_from_file(tipo_envio)

    if clientes is not None:
        # Preparar a URL para o envio
        url = BASE_URL.format(usuario, 'image' if image_name else 'message')

        print(f'[{datetime.now().strftime("%d-%m-%Y %H:%M:%S")}] [ENVIO][{tipo_envio.upper()}] [QTD.][{clientes.count()}]')

        for cliente in clientes:
            telefone_limpo = re.sub(r'\s+|\W', '', cliente.telefone)
            

            send_wpp_msg_actives(url, telefone_limpo)

    elif telefones:
        # Dividir os telefones em uma lista
        lista_telefones = telefones.split(',')

        # Calcular a quantidade de telefones
        quantidade = len(lista_telefones)

        # Preparar a URL para o envio
        url = BASE_URL.format(usuario, 'image' if image_name else 'message')

        print(f'[{datetime.now().strftime("%d-%m-%Y %H:%M:%S")}] [ENVIO][[{tipo_envio.upper()}]] [QTD.][{quantidade}]')

        # Loop para realizar os envios e imprimir a quantidade
        for telefone in lista_telefones:
            telefone_limpo = re.sub(r'\s+|\W', '', telefone)

            # Enviar mensagem para o telefone
            send_wpp_msg_actives(url, telefone_limpo)



def get_img_base64(image_name, sub_directory):
    # Caminho do diret√≥rio onde as imagens est√£o localizadas
    image_path = os.path.join(os.path.dirname(__file__), f'images\{sub_directory}', image_name)

    try:
        # Abrir a imagem e ler o conte√∫do como bin√°rio
        with open(image_path, 'rb') as image_file:
            # Codificar a imagem em base64
            encoded_image = base64.b64encode(image_file.read())
            # Converter para string utf-8 e retornar
            return encoded_image.decode('utf-8')
    except Exception as e:
        print(f"Erro ao tentar abrir o arquivo de IMAGEM: {e}")
        return None


def process_telefones_from_file(sub_directory):
    # Caminho do diret√≥rio onde o arquivo "telefones" est√° localizado
    telefones_path = os.path.join(os.path.dirname(__file__), f'archives\{sub_directory}', 'telefones.txt')

    try:
        # Abrir e ler o arquivo
        with open(telefones_path, 'r', encoding='utf-8') as telefones_file:
            telefones_data = telefones_file.read().split('\n')
            
            # Processar os n√∫meros de telefone
            telefones = ','.join([
                re.sub(r'\s+|\W', '', telefone) 
                for telefone in telefones_data if telefone.strip()
            ])
            return telefones
    except Exception as e:
        print(f"Erro ao tentar abrir o arquivo de TELEFONES: {e}")
        return None


def get_message_from_file(file_name, sub_directory):
    # Caminho do diret√≥rio onde o arquivo "msg" est√° localizado
    file_path = os.path.join(os.path.dirname(__file__), f'archives\{sub_directory}', file_name)

    try:
        # Abrir e ler o arquivo
        with open(file_path, 'r', encoding='utf-8') as message_file:
            message = message_file.read()
            return message
    except Exception as e:
        print(f"Erro ao tentar abrir o arquivo de MENSAGEM: {e}")
        return None
##### FIM


# Fun√ß√£o para executar o script de backup do "db.sqlite3" para o diret√≥rio do Drive.
def backup_db_sh():
    # Obter a data e hora atual formatada
    data_hora_atual = datetime.now().strftime("%d-%m-%Y %H:%M:%S")

    # Caminho para o script de backup
    caminho_arquivo_sh = './backup_db.sh'

    # Executar o script de backup
    resultado = subprocess.run(['sh', caminho_arquivo_sh], capture_output=True, text=True)
    
    # Verificar o resultado da execu√ß√£o do script
    if resultado.returncode == 0:
        print('[{}] [BACKUP DI√ÅRIO] Backup do DB realizado.'.format(data_hora_atual))
    else:
        print('[{}] [BACKUP DI√ÅRIO] Falha durante backup do DB.'.format(data_hora_atual))
        print('Erro: ', resultado.stderr)
##### FIM


##### FUN√á√ÉO PARA EXECUTAR TAREFAS AGENDADAS PARA ENVIO DE MENSAGENS
def run_scheduled_tasks():
    try:
        # Fun√ß√£o para encontrar o segundo s√°bado do m√™s
        def get_second_saturday(year, month):
            # Primeiro dia do m√™s
            first_day = datetime(year, month, 1)
            # Calcula o primeiro s√°bado (weekday() == 5 indica s√°bado)
            first_saturday = first_day + timedelta(days=(5 - first_day.weekday()) % 7)
            # Segundo s√°bado √© 7 dias ap√≥s o primeiro s√°bado
            second_saturday = first_saturday + timedelta(days=7)
            return second_saturday.day
        
        # Fun√ß√£o para encontrar o √∫ltimo s√°bado do m√™s
        def get_last_saturday(year, month):
            # √öltimo dia do m√™s
            last_day_of_month = calendar.monthrange(year, month)[1]
            last_day = datetime(year, month, last_day_of_month)
            # Calcula o √∫ltimo s√°bado
            last_saturday = last_day - timedelta(days=(last_day.weekday() - 5) % 7)
            return last_saturday.day

        # Obter o dia da semana, m√™s e ano
        current_day = datetime.now().day
        current_weekday = datetime.now().strftime('%A')
        year = datetime.now().year
        month = datetime.now().month

        # Inicializar vari√°veis
        type_schedule = None
        img_schedule = None
        msg_schedule = None

        # Calcular o segundo e o √∫ltimo s√°bado do m√™s
        second_saturday = get_second_saturday(year, month)
        last_saturday = get_last_saturday(year, month)

        if current_weekday == "Saturday":
            type_schedule = "ativos"
            img_schedule = 'img1.png'

            # Verifica se √© o segundo ou o √∫ltimo s√°bado do m√™s
            if current_day == second_saturday:
                msg_schedule = get_message_from_file('msg1.txt', type_schedule)
            elif current_day == last_saturday:
                msg_schedule = get_message_from_file('msg2.txt', type_schedule)

        elif current_weekday == "Wednesday":
            type_schedule = "avulso"
            
            if current_day in range(1, 11):
                img_schedule = 'img2-1.png'
                msg_schedule = get_message_from_file('msg2-1.txt', type_schedule)
            elif current_day in range(11, 21):
                img_schedule = 'img2-2.png'
                msg_schedule = get_message_from_file('msg2-2.txt', type_schedule)
            elif current_day in range(21, 32):
                img_schedule = 'img2-3.png'
                msg_schedule = get_message_from_file('msg2-3.txt', type_schedule)

        elif current_weekday == "Monday":
            type_schedule = "cancelados"

            if current_day in range(1, 11):
                img_schedule = 'img3-1.png'
                msg_schedule = get_message_from_file('msg3-1.txt', type_schedule)
            elif current_day in range(11, 21):
                img_schedule = 'img3-2.png'
                msg_schedule = get_message_from_file('msg3-2.txt', type_schedule)
            elif current_day in range(21, 32):
                img_schedule = 'img3-3.png'
                msg_schedule = get_message_from_file('msg3-3.txt', type_schedule)

        # Verifica se todas as vari√°veis foram corretamente definidas e executa a fun√ß√£o agendada
        if type_schedule and img_schedule and msg_schedule:
            envio_avulso = functools.partial(wpp_msg_ativos, type_schedule, img_schedule, msg_schedule)
            envio_avulso()
        else:
            print(f'[{datetime.now().strftime("%d-%m-%Y %H:%M:%S")}] [ENVIO] N√£o h√° envios para hoje.')

    except Exception as e:
        print(f"Erro durante a execu√ß√£o de [run_scheduled_tasks()]: {str(e)}")
##### FIM


##### Threading para executar os jobs em paralelo
def run_threaded(job):
    job_thread = threading.Thread(target=job)
    job_thread.start()


##### Agendar a execu√ß√£o das tarefas
schedule.every().day.at("10:00").do(
    run_threaded, run_scheduled_tasks
)
schedule.every().day.at("16:00").do(
    run_threaded, mensalidades_a_vencer
)
schedule.every().day.at("16:30").do(
    run_threaded, mensalidades_vencidas
)
schedule.every().day.at("17:00").do(
    run_threaded, mensalidades_canceladas
)
schedule.every(60).minutes.do(
    run_threaded, backup_db_sh
)
#####


##### Executar indefinidamente
while True:
    schedule.run_pending()
    time.sleep(5)

WIgC5Sf5vK5o
qFkhEYfzGUQ5
